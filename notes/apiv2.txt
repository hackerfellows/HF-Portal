* No authentication needed
+ Admin authentication needed
$ Needs to be THAT user, or admin

All other calls need user level authentication


/api/v2/fellows
	/
		GET: 	get all fellows plus information from Users (email, user type, and votes)
		POST:	create a new fellow, returns that user's json to client
	/users
		GET:	DEPRICATED
	/applications
		GET:	list all applications
	/application/:id
		GET:	Get specific application based on fellow id
	/:id
		GET: 	get one fellow with tags
		PUT:$	updates an existing fellow's record and application
		DEL:+	deletes an existing fellow's record and application
	/user_id/:user_id
		GET: 	get one fellow with tags plus their Users row



/api/v2/companies
	/
		GET: 	get all fellows plus information from Users (email, user type, and votes)
		POST:	create a new company, returns that user's json to client
	/users
		GET:	DEPRICATED
	/applications
		GET:	list all applications
	/application/:id
		GET:	Get specific application based on compnay id
	/:id
		GET:	get one company with Tags and Users row TODO: Should this return users?
		PUT:$	updates an existing company's record and application
		DEL:+	deletes an existing company's record and application
	/user_id/:user_id
		GET:	literally the same as a GET on /:id (/:id probably shouldn't return Users stuff)


/api/v2/tags
	/
		GET:	gets all tags
		POST:	creates a tag if one doesn't already exist
	/:id
		PUT:+	updates a tag name
	/:tag_id
		DEL:+	removes tag


/api/v2/votes
	/
		POST:	pass voter and votee id in body and enforces voting rules
	/:voter_id
		GET:$	gets votes of user by voter_id
	/:voter_id/:vote_id
		DEL:$	deletes a vote


/api/v2/users
	/:user_id/votes
		GET:	gets votes for a specific user (both votesFor and votesCast)	
	/login
		POST:*	attempts login, redirects to /login/success or /login/failure
	/confirm-login
		GET:	returns user if logged in, null if not
	/logout
		GET:	logs out
	/create
		POST:*	creates a new user
	/:user_id
		PUT:$	updates a user
		DEL:+	deletes a user

